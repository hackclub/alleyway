---
import Base from "../../layouts/Base.astro";
import { auth } from "@auth"; // import your Better Auth instance

export const prerender = false;

let session = null;
let userId: string | null = null;
let slackInfo: any = null;
let githubInfo: any = null;
let accounts: any[] | null = null;
let errorMsg: string | null = null;

let slackAccount: any = null;
let githubAccount: any = null;
let slackAccessToken: any | null = null;
let githubAccessToken: any | null = null;
let jwtToken: string | null = null;

let projects: any[] | null = null;

try {
    session = await auth.api.getSession({
        headers: Astro.request?.headers ?? new Headers(),
    });

    console.log(session);

    userId = session?.session?.userId ?? null;

    if (!userId) {
        // no user signed in; don't call account APIs
        console.log("No user logged in");
    } else {
        console.log("Better Auth API endpoints:");
        console.log(Object.keys(auth.api));

        const { token: string } = await auth.api.getToken({
            headers: Astro.request.headers,
        });

        jwtToken = string;
        console.log("Got JWT token", jwtToken);

        // pull account details, we know these must exist

        accounts = await auth.api.listUserAccounts({
            headers: Astro.request.headers,
        });

        console.log("Loaded accounts", accounts);
        slackAccount = accounts
            ? accounts.find((acc: any) => acc.providerId === "slack")
            : null;
        githubAccount = accounts
            ? accounts.find((acc: any) => acc.providerId === "github")
            : null;

        slackAccessToken = (
            await auth.api.getAccessToken({
                headers: Astro.request.headers,
                body: { providerId: "slack", accountId: slackAccount.id },
            })
        ).accessToken;

        slackInfo = await auth.api.accountInfo({
            headers: Astro.request.headers,
            body: { accountId: slackAccount.accountId },
        });

        if (!githubAccount) {
            console.log("No GitHub account linked");
        } else {
            githubInfo = await auth.api.accountInfo({
                headers: Astro.request.headers,
                body: { accountId: githubAccount.accountId },
            });
            githubAccessToken = (
                await auth.api.getAccessToken({
                    headers: Astro.request.headers,
                    body: { providerId: "github", accountId: githubAccount.id },
                })
            ).accessToken;
        }
        console.log("Slack info", slackInfo);
        const res = await fetch("http://localhost:3000/api/account/info", {
            headers: {
                Authorization: `Bearer ${jwtToken}`,
            },
        });
        const data = await res.json();
        console.log("Protected response:", data);
    }
} catch (e) {
    console.error("getSession failed", e);
    errorMsg = "Failed to get session";
}

/* list of data we actually need to display from oauth providers:

slack:
- display name
- profile picture

github:
- username
- repositories

list of stuff from airtable:
- project statuses
- account statuses

Extracted the account access tokens, the rest should just be a simple API call

still need to figure out how to do that fuck ass JWT handshake, but it shouldn't be too hard to figure out.

*/
---

<!-- TODO: dynamically edit website depending on session states -->
<Base>
    {
        errorMsg ? (
            <div class="text-red-500 text-center mt-10">{errorMsg}</div>
        ) : session && userId ? (
            <div class="max-w-2xl mx-auto mt-10 p-6 bg-white/10 backdrop-blur rounded-2xl shadow-lg text-center text-white">
                <h1 class="text-2xl font-bold mb-6">Dashboard</h1>

                <div class="flex flex-col items-center gap-6">
                    {slackInfo && (
                        <div class="flex flex-col items-center">
                            <img
                                src={
                                    slackInfo?.user?.image ||
                                    "/default-avatar.png"
                                }
                                alt="Slack Profile"
                                class="w-24 h-24 rounded-full border-4 border-white shadow"
                            />
                            <p class="mt-2 text-lg font-semibold">
                                {slackInfo?.user?.real_name ||
                                    "Unknown Slack User"}
                            </p>
                            <p class="text-sm text-gray-300">
                                @{slackInfo?.user?.name}
                            </p>
                        </div>
                    )}

                    {githubInfo && (
                        <div class="flex flex-col items-center">
                            <p class="text-lg font-semibold">
                                GitHub: @{githubInfo?.user?.login ?? "Unknown"}
                            </p>
                        </div>
                    )}
                </div>

                <div class="flex justify-center gap-4 mt-8">
                    <button
                        id="logout"
                        class="bg-red-500 hover:bg-red-600 px-4 py-2 rounded-lg font-medium"
                    >
                        Logout
                    </button>
                    {!githubAccount ? (
                        <button
                            id="link-github"
                            class="bg-gray-700 hover:bg-gray-800 px-4 py-2 rounded-lg font-medium"
                        >
                            Link GitHub
                        </button>
                    ) : (
                        <button
                            id="unlink-github"
                            class="bg-gray-700 hover:bg-gray-800 px-4 py-2 rounded-lg font-medium"
                        >
                            Unlink GitHub
                        </button>
                    )}
                </div>
            </div>
        ) : (
            <div class="text-center mt-20 text-gray-300">
                <p>Please sign in to view your dashboard.</p>
            </div>
        )
    }
</Base>

<script>
    const { authClient } = await import("../../lib/auth-client");

    document.querySelector("#logout")?.addEventListener("click", () => {
        authClient.signOut({
            fetchOptions: {
                onSuccess: () => (window.location.href = "/"),
            },
        });
    });

    document.querySelector("#link-github")?.addEventListener("click", () => {
        authClient.linkSocial({
            provider: "github",
            callbackURL: "/dashboard",
        });
    });

    document.querySelector("#unlink-github")?.addEventListener("click", () => {
        authClient.unlinkAccount({
            providerId: "github",
            fetchOptions: {
                onSuccess: () => window.location.reload(),
            },
        });
    });
</script>
