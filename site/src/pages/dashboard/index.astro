---
import Base from "../../layouts/Base.astro";
import { auth } from "@auth";

export const prerender = false;

let session = null;
let slackProfile = null;
let githubProfile = null;
let errorMsg = null;
let jwtToken = null;

try {
    // 1. Get user session
    session = await auth.api.getSession({ headers: Astro.request.headers });
    const userId = session?.session?.userId;

    if (!userId) {
        throw new Error("No active session");
    }

    // 2. List connected accounts
    const accounts = await auth.api.listUserAccounts({
        headers: Astro.request.headers,
    });

    // Find Slack & GitHub accounts
    const slackAccount = accounts.find((a) => a.providerId === "slack");
    const githubAccount = accounts.find((a) => a.providerId === "github");

    // 3. Fetch Slack profile via OIDC userinfo endpoint
    if (slackAccount) {
        const { accessToken: slackAccessToken } = await auth.api.getAccessToken(
            {
                headers: Astro.request.headers,
                body: { providerId: "slack", accountId: slackAccount.id },
            }
        );

        if (slackAccessToken) {
            const slackRes = await fetch(
                "https://slack.com/api/openid.connect.userInfo",
                {
                    headers: { Authorization: `Bearer ${slackAccessToken}` },
                }
            );
            const slackJson = await slackRes.json();
            if (slackJson.ok === false) {
                console.warn("Slack userInfo error:", slackJson);
            } else {
                slackProfile = slackJson;
            }
        }
        console.log("Slack profile:", slackProfile.sub);
    }

    // 4. Fetch GitHub profile from GitHub API
    if (githubAccount) {
        const { accessToken: githubAccessToken } =
            await auth.api.getAccessToken({
                headers: Astro.request.headers,
                body: { providerId: "github", accountId: githubAccount.id },
            });

        if (githubAccessToken) {
            const ghRes = await fetch("https://api.github.com/user", {
                headers: { Authorization: `Bearer ${githubAccessToken}` },
            });
            if (ghRes.ok) githubProfile = await ghRes.json();
            else console.warn("GitHub user fetch failed:", await ghRes.text());
        }
        console.log("GitHub profile:", githubProfile);
    }

    // 5. Get JWT for backend API calls
    const { token: string } = await auth.api.getToken({
        headers: Astro.request.headers,
    });
    jwtToken = string;
    console.log("Got JWT token", jwtToken);

    // 6. Use JWT to call airtable
    const apiRes = await fetch("http://localhost:3000/api/account/info", {
        headers: { Authorization: `Bearer ${jwtToken}` },
    });
} catch (err) {
    console.error("Dashboard load failed:", err);
    errorMsg = err.message || "Unknown error loading dashboard";
}
---

<Base>
    {
        session ? (
            <div class="p-6 space-y-6">
                <h1 class="text-2xl font-semibold">Dashboard</h1>

                {errorMsg && <p class="text-red-500">{errorMsg}</p>}

                <div class="grid gap-6 md:grid-cols-2">
                    {slackProfile ? (
                        <div class="p-4 border rounded-xl shadow-sm bg-white/5">
                            <h2 class="text-xl font-medium mb-2">Slack</h2>
                            <div class="flex items-center gap-4">
                                <img
                                    src={slackProfile.picture}
                                    alt="Slack avatar"
                                    class="w-16 h-16 rounded-full border"
                                />
                                <div>
                                    <p class="font-semibold">
                                        {slackProfile.name}
                                    </p>
                                    <p class="text-gray-400">
                                        {slackProfile.email}
                                    </p>
                                </div>
                            </div>
                        </div>
                    ) : (
                        <div class="p-4 border rounded-xl text-gray-400">
                            No Slack account linked
                        </div>
                    )}

                    {githubProfile ? (
                        <div class="p-4 border rounded-xl shadow-sm bg-white/5">
                            <h2 class="text-xl font-medium mb-2">GitHub</h2>
                            <div class="flex items-center gap-4">
                                <img
                                    src={githubProfile.avatar_url}
                                    alt="GitHub avatar"
                                    class="w-16 h-16 rounded-full border"
                                />
                                <div>
                                    <p class="font-semibold">
                                        {githubProfile.login}
                                    </p>
                                    <p class="text-gray-400">
                                        {githubProfile.html_url}
                                    </p>
                                </div>
                            </div>
                        </div>
                    ) : (
                        <div class="p-4 border rounded-xl text-gray-400">
                            No GitHub account linked
                        </div>
                    )}
                </div>

                <div class="flex gap-4 pt-6">
                    <button
                        id="logout"
                        class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700"
                    >
                        Logout
                    </button>
                    <button
                        id="link-github"
                        class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                    >
                        Link GitHub
                    </button>
                    <button
                        id="unlink-github"
                        class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700"
                    >
                        Unlink GitHub
                    </button>
                </div>
            </div>
        ) : (
            <div class="text-center py-20">
                <p class="text-lg text-gray-300">
                    Please sign in to view your dashboard.
                </p>
            </div>
        )
    }
</Base>

<script>
    const { authClient } = await import("../../lib/auth-client");

    const logoutBtn = document.querySelector("#logout") as HTMLElement;
    const linkBtn = document.querySelector("#link-github") as HTMLElement;
    const unlinkBtn = document.querySelector("#unlink-github") as HTMLElement;

    if (logoutBtn) {
        logoutBtn.onclick = () =>
            authClient.signOut({
                fetchOptions: {
                    onSuccess: () => (window.location.href = "/"),
                },
            });
    }

    if (linkBtn) {
        linkBtn.onclick = () =>
            authClient.linkSocial({
                provider: "github",
                callbackURL: "/dashboard",
            });
    }

    if (unlinkBtn) {
        unlinkBtn.onclick = () =>
            authClient.unlinkAccount({
                providerId: "github",
                fetchOptions: {
                    onSuccess: () => window.location.reload(),
                },
            });
    }
</script>
