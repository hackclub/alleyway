---
export interface Props {
    currentSlug?: string;
}

const { currentSlug } = Astro.props as Props;

type DocModule = {
    file: string;
    frontmatter?: Record<string, any>;
};

// Discover markdown docs under src/docs/pub
const files: DocModule[] = await Astro.glob("../docs/pub/**/*.md");

function toSlug(file: string) {
    const normalized = file.replace(/\\/g, "/");
    const afterRoot = normalized.split("/docs/pub/")[1] || "";
    return afterRoot.replace(/\.md$/i, "");
}

function toTitle(fmTitle: string | undefined, slug: string) {
    if (fmTitle && fmTitle.trim().length) return fmTitle.trim();
    const last = slug.split("/").pop() || slug;
    return last
        .split("-")
        .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
        .join(" ");
}

const items = files
    .map((f) => {
        const slug = toSlug(f.file);
        return {
            slug,
            href: "/docs/" + slug,
            title: toTitle((f as any).frontmatter?.title, slug),
        };
    })
    .sort((a, b) => a.slug.localeCompare(b.slug));
---

<aside
    class="w-full md:w-64 md:min-h-screen md:sticky md:top-0 border-r border-white/10 p-4"
>
    <h2 class="text-sm uppercase tracking-wider text-white/60 mb-3">Docs</h2>
    <nav class="space-y-1">
        {
            items.map((it) => {
                const active = currentSlug === it.slug;
                return (
                    <a
                        href={it.href}
                        class={`block rounded px-2 py-1 text-sm transition-colors ${
                            active
                                ? "bg-white/10 text-white"
                                : "text-white/80 hover:text-white hover:bg-white/5"
                        }`}
                    >
                        {it.title}
                    </a>
                );
            })
        }
    </nav>
</aside>
